function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
n = size(X, 2);
h = hidden_layer_size;
r = num_labels;         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

%Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m


y_matrix = eye(num_labels)(y,:);%put the certain y value as index of one into the each row of 10 elements, for example, 3...0010000000
%fprintf('the size of y\n');
size(y); %the vector size of y (5000*1)
%fprintf('the size of y_matrix\n');
size(y_matrix); %the vector size of y_matrix (5000*10)
%X = [ones(m, 1) X];

a1 = [ones(m, 1) X]; %a1 equals the X input matrix with a column of 1's added (bias units) as the first column.
z2 = a1*Theta1';%z2 equals the product of a1(5000*401) and Θ1(25*401)
a2 = sigmoid(z2);%a2 is the result of passing z2 through g()
a2_m = size(a2,1);%5000*25
a2= [ones(a2_m, 1) a2];%Then add a column of bias units to a2 (as the first column).

z3= a2*Theta2'; %z3 equals the product of a2(5000*26) and Θ2(10*26)
a3 = sigmoid(z3); %a3 is the result of passing z3 through g()
%a3_size=size(a3); %5000*10
error_m= -(y_matrix .*log(a3))(:); %element multiple 5000*10 then to column vector
error_n = ((1-y_matrix) .* log(1-(a3)))(:);%element multiple 5000*10 to column vector
error = sum(((error_m) - (error_n))); 
%fprintf('the size of error\n');
size(error);
%error_total= double-sum(error);
J=1/m*error;
%forwardpropagation
temp1 = Theta1;
temp1(:, [1]) = []; %delete the first column with bias units
temp2 = Theta2;
temp2(:, [1]) = []; %delete the first column with bias units

Theta1_grad=(lambda/(2*m))* ((temp1(:)'*temp1(:)));
%fprintf('the theta1 grad size:\n');
size(Theta1_grad);
Theta2_grad=(lambda/(2*m))* ((temp2(:)'*temp2(:)));
%fprintf('the theta2 grad size:\n');
size(Theta2_grad);
f_Theta1_grad = Theta1_grad;
f_Theta2_grad = Theta2_grad;
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%m = the number of training examples
%n = the number of training features, including the initial bias unit.
%h = the number of units in the hidden layer - NOT including the bias unit
%r = the number of output classifications
Delta1 = zeros(h,n);
Delta2 = zeros(r, h+1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% vector method
%a1 = [ones(m, 1) X]; %a1 equals the X input matrix with a column of 1's added (bias units) as the first column.
%z2 = a1*Theta1';%z2 equals the product of a1(5000*401) and Θ1(25*401)

%a2 = sigmoid(z2);%a2 is the result of passing z2 through g()%z2 equals the product of a1(5000*401) and Θ1(25*401)
d3 = a3-y_matrix; %difference between a3 and y_matrix 5000*10
%fprintf('the size of d3\n');
size(d3);
Theta2_NoBias= Theta2(:,2:end);
z2;
sigmoidGradient(z2);
d2 = (d3*Theta2_NoBias);% (m x r) ⋅ (r x h) --> (m x h)
%d2 = (d3*Theta2_NoBias).*sigmoidGradient(z2);% (m x r) ⋅ (r x h) --> (m x h)
%fprintf('size of d2\n');
%size(d2); %5000*10  mxh
a2;
a2_NoBias= a2(:,2:end);
%z2 = a1*Theta1';%
%d2 = d2.*(sigmoid(z2)).*(1-sigmoid(z2));
d2 = d2 .*(a2_NoBias).*(1-a2_NoBias);% (m x r) ⋅ (r x h) --> (m x h) should be the same as z2 (5000*25)?
Delta1=d2' * a1; %The size is (h x m) ⋅ (m x n) --> (h x n)
%fprintf('size of Delta1\n');
%size(Theta1)
%size(Delta1)
%size(Theta1_grad);
Delta2= d3'* a2;%(r x m) ⋅ (m x [h+1]) --> (r x [h+1]) --10*26
%fprintf('size of Delta2\n');
%size(Delta2)
Theta1_grad = ((Delta1)/m); %unregulated grad from back propogation
Theta2_grad = ((Delta2)/m); %unregulated grad
temp1_back= Theta1;
temp1_back(:,1) = 0; % make the first column to zero
temp1_back = (lambda/m)*temp1_back; %regulate the rest with lambda/m
Theta1_grad =Theta1_grad +temp1_back;
temp2_back = Theta2;
temp2_back(:,1) = 0; % make the first column to zero
temp2_back =(lambda/m)*temp2_back;
Theta2_grad = Theta2_grad + temp2_back;
%fprintf('the Theta1_grad size\n');
size(Theta1_grad);
%fprintf('the Theta2_grad size\n');
size(Theta2_grad);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%end of vector method
%J = J +sum(Theta1_grad) + sum(Theta2_grad);
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

%Theta1_grad=f_Theta1_grad; %Theta1_grad from front propagation 
%Theta2_grad=f_Theta2_grad; %Theta2_grad from front propagation 


J = J +sum(f_Theta1_grad(:)) +sum(f_Theta2_grad(:));


% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
